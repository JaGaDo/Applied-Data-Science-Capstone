# Import required libraries
import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Get names of all landing sites and create an option for the Dropdown
output = []
for x in spacex_df['Launch Site']:
    if x not in output:
        output.append(x)
opt = [{'label': 'All Sites', 'value': 'ALL'}]
for k in output:
    opt.append({'label': k, 'value': k})

tmp = []
for index, row in spacex_df.iterrows():
    if row['class'] == 1:
        tmp.append('Success')
    else:
        tmp.append('Failed')
spacex_df['result'] = tmp    
spacex_df['class1'] = spacex_df['class'] +1

#dff = spacex_df[spacex_df['Launch Site'] == 'CCAFS LC-40']
#print(dff)

#spacex_df.filter(items=spacex_df['Launch Site'][0]).head()
#px.pie(spacex_df, values='class', names='Launch Site', title='title').show()


# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                dcc.Dropdown(id='site-dropdown',
                                        options=opt,
                                        value='ALL',
                                        placeholder="place holder here",
                                        searchable=True
                                        ),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)
                                dcc.RangeSlider(id='payload-slider',
                                                min=0, max=10000, step=1000,
                                                marks={0: '0',
                                                    2500: '2500',
                                                    5000: '5000',
                                                    7500: '7500',
                                                    10000: '10000'},
                                                value=[min_payload, max_payload]),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# Function decorator to specify function input and output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        fig = px.pie(spacex_df, values='class', 
        names='Launch Site', 
        title='Total Success Launches By Site')
        return fig
    else:       
        data = spacex_df[spacex_df['Launch Site'] == entered_site]
        #print(data)
        #print(data.shape)
        print(data['class'].mean())
        fig = px.pie(data, values='class1', 
        names= 'class', 
        title='Total launches for site ' + entered_site)
        return fig

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
               [Input(component_id='site-dropdown', component_property='value'), 
               Input(component_id="payload-slider", component_property="value")])
def update_bar_chart(entered_site,slider_range):
    if entered_site == 'ALL':
        low, high = slider_range
        mask = (spacex_df['Payload Mass (kg)'] > low) & (spacex_df['Payload Mass (kg)'] < high)
        fig = px.scatter(
            spacex_df[mask], x="Payload Mass (kg)", y="class",
            color="Booster Version Category", hover_data=['class'])
        return fig
    else:       
        low, high = slider_range
        mask = (spacex_df['Payload Mass (kg)'] > low) & (spacex_df['Payload Mass (kg)'] < high) & (spacex_df['Launch Site'] == entered_site)
        fig = px.scatter(
            spacex_df[mask], x="Payload Mass (kg)", y="class",
            color="Booster Version Category", hover_data=['class'])
        return fig


# Run the app
if __name__ == '__main__':
    app.run_server()
    #app.run_server(port=8050, host='127.0.0.1',debug=True)
